8	一、std::promise介绍
std::promise是C++11并发编程中常用的一个类，常配合std::future使用。其作用是在一个线程t1中保存一个类型typename T的值，可供相绑定的std::future对象在另一线程t2中获取。


二、代码示例：
下面我们通过几个简单小例子逐渐深入了解std::promise的使用方法。
示例1：
[cpp] view plain copy
1.	#include <iostream>  
2.	#include <future>  
3.	#include <chrono>  
4.	  
5.	void Thread_Fun1(std::promise<int> &p)  
6.	{  
7.	    //为了突出效果，可以使线程休眠5s  
8.	    std::this_thread::sleep_for(std::chrono::seconds(5));  
9.	  
10.	    int iVal = 233;  
11.	    std::cout << "传入数据(int)：" << iVal << std::endl;  
12.	  
13.	    //传入数据iVal  
14.	    p.set_value(iVal);  
15.	}  
16.	  
17.	void Thread_Fun2(std::future<int> &f)  
18.	{  
19.	    //阻塞函数，直到收到相关联的std::promise对象传入的数据  
20.	    auto iVal = f.get();        //iVal = 233  
21.	  
22.	    std::cout << "收到数据(int)：" << iVal << std::endl;  
23.	}  
24.	  
25.	int main()  
26.	{  
27.	    //声明一个std::promise对象pr1，其保存的值类型为int  
28.	    std::promise<int> pr1;  
29.	    //声明一个std::future对象fu1，并通过std::promise的get_future()函数与pr1绑定  
30.	    std::future<int> fu1 = pr1.get_future();  
31.	  
32.	    //创建一个线程t1，将函数Thread_Fun1及对象pr1放在线程里面执行  
33.	    std::thread t1(Thread_Fun1, std::ref(pr1));  
34.	    //创建一个线程t2，将函数Thread_Fun2及对象fu1放在线程里面执行  
35.	    std::thread t2(Thread_Fun2, std::ref(fu1));  
36.	  
37.	    //阻塞至线程结束  
38.	    t1.join();  
39.	    t2.join();  
40.	  
41.	    return 1;  
42.	}  

可以看到std::future对象fu1先是通过std::promise的函数get_future()与std::promise对象pr1相绑定，pr1在线程t1中通过set_value()传入共享数据，fu1在线程t2中通过阻塞函数get()获取到传入的数据。


http://blog.csdn.net/qq_28098067/article/details/50586810
9	C++中的_access函数
转载 2016年01月26日 13:50:13
•	10665
•	今天读代码看到一个access函数，当时没明白怎么回事。man了一下才知道该函数主要用于文件读取方面——判断文件是否存在，并判断文件是否可写。Linux下，该函数为access，位于头文件<unistd.h>中，而在标准C++中，该函数为_access，位于头文件<io.h>中，两者的使用方法基本相同，只是在一些参数方面可能会有一些不同的宏定义。下面是标准C++为例做一下总结：
•	头文件：<io.h>
•	函数原型：int _access(const char *pathname, int mode);
•	参数：pathname 为文件路径或目录路径 mode 为访问权限（在不同系统中可能用不能的宏定义重新定义）
•	返回值：如果文件具有指定的访问权限，则函数返回0；如果文件不存在或者不能访问指定的权限，则返回-1.
•	备注：当pathname为文件时，_access函数判断文件是否存在，并判断文件是否可以用mode值指定的模式进行访问。当pathname为目录时，_access只判断指定目录是否存在，在Windows NT和Windows 2000中，所有的目录都只有读写权限。
•	mode的值和含义如下所示：
•	00——只检查文件是否存在
•	02——写权限
•	04——读权限
•	06——读写权限


 
