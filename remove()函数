STL中remove（）只是将待删除元素之后的元素移动到vector的前端，而不是删除。若要真正移除，需要搭配使用erase()。
例子如下：
[cpp] view plain copy
1.	#include <iostream>  
2.	#include <vector>  
3.	#include <algorithm>  
4.	#include <functional>  
5.	  
6.	using namespace std;  
7.	  
8.	int main()  
9.	{  
10.	    vector<int> Numbers;   //vector containing numbers  
11.	  
12.	    Numbers.push_back(10);  
13.	    Numbers.push_back(20);  
14.	    Numbers.push_back(10);  
15.	    Numbers.push_back(15);  
16.	    Numbers.push_back(12);  
17.	    Numbers.push_back(7);  
18.	    Numbers.push_back(9);  
19.	  
20.	    vector<int>::iterator  it;  
21.	  
22.	    cout << "Before calling remove" << endl << "Numbers { " ;  
23.	  
24.	    for(it = Numbers.begin(); it != Numbers.end(); it++)  
25.	    {  
26.	        cout << *it << "\t" ;  
27.	    }  
28.	    cout << " }\n" << endl ;  
29.	  
30.	    // remove all elements from Numbers that match 10  
31.	    vector<int>::iterator ret = remove(Numbers.begin(), Numbers.end(), 10) ;  
32.	  
33.	    cout << "After calling remove" << endl<< "Numbers { " ;  
34.	    for(it = Numbers.begin(); it != Numbers.end(); it++)  
35.	    {  
36.	        cout << *it << "\t" ;  
37.	    }  
38.	    cout << " }\n" << endl ;  
39.	  
40.	    cout << "Total number of elements removed from Numbers = "  
41.	        << Numbers.end() - ret << endl ;  
42.	  
43.	    cout << "Valid elements of Numbers { " ;  
44.	    for(it = Numbers.begin(); it != ret; it++)  
45.	    {  
46.	        cout << *it << "\t" ;  
47.	    }  
48.	    cout << " }\n" << endl ;  
49.	  
50.	}  



 
我们可以看出：
对于原vector { 10 20 10 15 12 7 9 }，删除10，会将10后面的元素移动到前面
（注意以下逐个元素对齐，模拟元素在内存中的位置，这样就容易看出变化规律）
原vector
10 20 10 15 12 7 9
遇到第一个10，数组变成
20      10 15 12 7 9
遇到第二个10移动到7 9之后又遇到第三个10于是剩下内存中未移动的7 9
20 15 12  7   9  7 9 
遇到第三个10
20 15 12  7   9  7 9 
因此，remove()需要和erase()配合使用
svec.erase(remove(svec.begin(),svec.end(),"be"), svec.end());
这句的意思是，取得"be"的位置（位于结尾），然后删除"be"到原vector结尾的所有元素
